name: Auto-grading

on:
  push:
    branches:
      - main

jobs:
  get_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ucdavis-ecs121wq22/grader
      - uses: actions/upload-artifact@v2
        with:
          name: remote_tests
          path: hw1/*

  build:
    needs: get_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
      - name: move artifacts
        run: |
          ls
          pwd
          mv remote_tests/tests/* tests/
          mv remote_tests/autograding.json .github/classroom/

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - uses: education/autograding@v1
        id: autograder
        continue-on-error: false

    outputs:
      grading-score: ${{ steps.autograder.outputs.Points }}

  cleanup:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: call webhook to delete artifacts
        env:
          FOR_WEBHOOKS_SECRET: ${{ secrets.ECS161_USER }}
        run: |
          echo "::add-mask::$FOR_WEBHOOKS_SECRET"
          curl --verbose --fail --show-error --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" --header "Authorization: token $FOR_WEBHOOKS_SECRET" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.everest-preview+json' --data-raw "{ \"event_type\": \"delete_all_artifacts\", \"client_payload\": {\"parent_runid\": \"$GITHUB_RUN_ID\", \"parent_repo\": \"$GITHUB_REPOSITORY\"} }"

  build-badges:
    name: Build Badges
    runs-on: ubuntu-latest
    if: always()
    needs: build
    steps:
      # need to checkout whole repo
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # switch to badges branch
      - run: git checkout badges || git checkout -b badges

      # make dir for badges
      - name: make badges dir
        run: mkdir -p .github/badges

      # create points bar
      - name: make points bar
        uses: markpatterson27/points-bar@v1
        with:
          points: ${{ needs.build.outputs.grading-score }}
          path: ".github/badges/points-bar.svg"

      # commit and push badge if score has changed
      - name: Commit and push badge
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add '.github/badges'
          git commit -m "Add/Update badge" || exit 0
          git push origin badges
